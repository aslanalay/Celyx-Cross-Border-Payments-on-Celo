// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title CelyxRemittance
 * @dev A simple remittance contract for low-cost stablecoin transfers on Celo.
 */

interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract CelyxRemittance {
    address public owner;
    IERC20 public stablecoin; // e.g. cUSD token on Celo

    uint256 public txCount = 0;

    struct Transfer {
        address sender;
        address receiver;
        uint256 amount;
        uint256 timestamp;
        string note;
    }

    mapping(uint256 => Transfer) public transfers;

    event Sent(address indexed from, address indexed to, uint256 amount, string note);
    event Withdrawn(address indexed by, uint256 amount);
    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);

    constructor(address _stablecoin) {
        owner = msg.sender;
        stablecoin = IERC20(_stablecoin);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    /**
     * @dev Send stablecoins to another user
     */
    function sendRemittance(address receiver, uint256 amount, string calldata note) external {
        require(receiver != address(0), "Invalid receiver");
        require(stablecoin.balanceOf(msg.sender) >= amount, "Insufficient balance");

        bool success = stablecoin.transferFrom(msg.sender, receiver, amount);
        require(success, "Transfer failed");

        txCount++;
        transfers[txCount] = Transfer(msg.sender, receiver, amount, block.timestamp, note);

        emit Sent(msg.sender, receiver, amount, note);
    }

    /**
     * @dev Owner can change stablecoin contract (e.g., from cUSD to cEUR)
     */
    function setStablecoin(address _newToken) external onlyOwner {
        stablecoin = IERC20(_newToken);
    }

    /**
     * @dev Transfer ownership to a new address
     */
    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid owner");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    /**
     * @dev View details of a transaction by ID
     */
    function getTransfer(uint256 id) external view returns (Transfer memory) {
        return transfers[id];
    }
}
